#tictac-asgn5#ebakan### This program runs great!### Changes made: add moderate difficulty ai and modify to fit this version of### the program -> checks for winning and blocking moves### other possible things to work on: impossible ai?import random#function: print grid#input:list of 9 elements to display#output: 9 elements easily displayeddef displayBoard(theBoard):        #loop through 3x for 3 rows        for i in range(3):            print (theBoard[i*3]+' | '+theBoard[i*3+1]+' | '+theBoard[i*3+2])            #if not the last line, print a divider            if i<2:                print('--+---+--')        print('\n')#function: get input from the user, check to see if it is valid, and place the#move on the board#input: the game board, the user#output: places the user's symbol on the board at the specified positiondef getHumanMove(theBoard,user):        #keep looping until a valid input is recieved        while True:                #attempt to get a valid input                try:                        x=int(raw_input('Space:'))-1                #excepts error for trying to cast a string as an integer                #checks for non-integer input                except ValueError:                        print("That's not an integer, sorry. Please try again.")                        continue                #check if input is within rnage                if x<0 or x>8:                        print("Sorry, that number not between 1 and 9. Please try again.")                        continue                #check to see if board space is already taken                if str(theBoard[x]).isalpha():                        print("Sorry, that space is already taken. Please try again.")                        continue                #if no error conditions met, break out of loop                break        theBoard[x]=user        return theBoard#function: generate a list of possible moves and randomly choose one move, or#choose a random move if no other moves possible#input: the board, computer user, human user#output: places a move on the boarddef getCompMove(theBoard,user,other):        winMoves=[]        blockMoves=[]        #this chunk of if statements: check for possible moves to win        if theBoard[0]==theBoard[3]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[0]==theBoard[1]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[0]==theBoard[6]==user and theBoard[3].isdigit():            winMoves.append(4)        if theBoard[0]==theBoard[2]==user and theBoard[1].isdigit():            winMoves.append(2)        if theBoard[0]==theBoard[4]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[0]==theBoard[8]==user and theBoard[4].isdigit():            winMoves.append(5)                if theBoard[1]==theBoard[0]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[1]==theBoard[2]==user and theBoard[0].isdigit():            winMoves.append(1)        if theBoard[1]==theBoard[4]==user and theBoard[7].isdigit():            winMoves.append(8)        if theBoard[1]==theBoard[7]==user and theBoard[4].isdigit():            winMoves.append(5)                if theBoard[2]==theBoard[1]==user and theBoard[0].isdigit():            winMoves.append(1)        if theBoard[2]==theBoard[4]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[2]==theBoard[5]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[2]==theBoard[0]==user and theBoard[1].isdigit():            winMoves.append(2)        if theBoard[2]==theBoard[8]==user and theBoard[5].isdigit():            winMoves.append(6)        if theBoard[2]==theBoard[6]==user and theBoard[4].isdigit():            winMoves.append(5)               if theBoard[3]==theBoard[0]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[3]==theBoard[6]==user and theBoard[0].isdigit():            winMoves.append(1)        if theBoard[3]==theBoard[4]==user and theBoard[5].isdigit():            winMoves.append(6)        if theBoard[3]==theBoard[5]==user and theBoard[4].isdigit():            winMoves.append(5)                if theBoard[4]==theBoard[0]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[4]==theBoard[1]==user and theBoard[7].isdigit():            winMoves.append(8)        if theBoard[4]==theBoard[2]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[4]==theBoard[3]==user and theBoard[5].isdigit():            winMoves.append(6)        if theBoard[4]==theBoard[5]==user and theBoard[3].isdigit():            winMoves.append(4)        if theBoard[4]==theBoard[6]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[4]==theBoard[7]==user and theBoard[1].isdigit():            winMoves.append(2)        if theBoard[4]==theBoard[8]==user and theBoard[0].isdigit():            winMoves.append(1)                if theBoard[5]==theBoard[2]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[5]==theBoard[8]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[5]==theBoard[3]==user and theBoard[4].isdigit():            winMoves.append(5)        if theBoard[5]==theBoard[4]==user and theBoard[3].isdigit():            winMoves.append(4)        if theBoard[6]==theBoard[3]==user and theBoard[0].isdigit():            winMoves.append(1)        if theBoard[6]==theBoard[0]==user and theBoard[3].isdigit():            winMoves.append(4)        if theBoard[6]==theBoard[7]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[6]==theBoard[8]==user and theBoard[7].isdigit():            winMoves.append(8)        if theBoard[6]==theBoard[4]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[6]==theBoard[2]==user and theBoard[4].isdigit():            winMoves.append(5)        if theBoard[7]==theBoard[6]==user and theBoard[8].isdigit():            winMoves.append(9)        if theBoard[7]==theBoard[8]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[7]==theBoard[4]==user and theBoard[1].isdigit():            winMoves.append(2)        if theBoard[7]==theBoard[1]==user and theBoard[4].isdigit():            winMoves.append(5)        if theBoard[8]==theBoard[7]==user and theBoard[6].isdigit():            winMoves.append(7)        if theBoard[8]==theBoard[5]==user and theBoard[2].isdigit():            winMoves.append(3)        if theBoard[8]==theBoard[6]==user and theBoard[7].isdigit():            winMoves.append(8)        if theBoard[8]==theBoard[2]==user and theBoard[5].isdigit():            winMoves.append(6)        if theBoard[8]==theBoard[4]==user and theBoard[0].isdigit():            winMoves.append(1)        if theBoard[8]==theBoard[0]==user and theBoard[4].isdigit():            winMoves.append(5)        #this chunk of if statements: check for possible moves to block        if theBoard[0]==theBoard[3]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[0]==theBoard[1]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[0]==theBoard[6]==other and theBoard[3].isdigit():            blockMoves.append(4)        if theBoard[0]==theBoard[2]==other and theBoard[1].isdigit():            blockMoves.append(2)        if theBoard[0]==theBoard[4]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[0]==theBoard[8]==other and theBoard[4].isdigit():            blockMoves.append(5)                if theBoard[1]==theBoard[0]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[1]==theBoard[2]==other and theBoard[0].isdigit():            blockMoves.append(1)        if theBoard[1]==theBoard[4]==other and theBoard[7].isdigit():            blockMoves.append(8)        if theBoard[1]==theBoard[7]==other and theBoard[4].isdigit():            blockMoves.append(5)                if theBoard[2]==theBoard[1]==other and theBoard[0].isdigit():            blockMoves.append(1)        if theBoard[2]==theBoard[4]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[2]==theBoard[5]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[2]==theBoard[0]==other and theBoard[1].isdigit():            blockMoves.append(2)        if theBoard[2]==theBoard[8]==other and theBoard[5].isdigit():            blockMoves.append(6)        if theBoard[2]==theBoard[6]==other and theBoard[4].isdigit():            blockMoves.append(5)            if theBoard[3]==theBoard[0]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[3]==theBoard[6]==other and theBoard[0].isdigit():            blockMoves.append(1)        if theBoard[3]==theBoard[4]==other and theBoard[5].isdigit():            blockMoves.append(6)        if theBoard[3]==theBoard[5]==other and theBoard[4].isdigit():            blockMoves.append(5)                if theBoard[4]==theBoard[0]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[4]==theBoard[1]==other and theBoard[7].isdigit():            blockMoves.append(8)        if theBoard[4]==theBoard[2]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[4]==theBoard[3]==other and theBoard[5].isdigit():            blockMoves.append(6)        if theBoard[4]==theBoard[5]==other and theBoard[3].isdigit():            blockMoves.append(4)        if theBoard[4]==theBoard[6]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[4]==theBoard[7]==other and theBoard[1].isdigit():            blockMoves.append(2)        if theBoard[4]==theBoard[8]==other and theBoard[0].isdigit():            blockMoves.append(1)                if theBoard[5]==theBoard[2]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[5]==theBoard[8]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[5]==theBoard[3]==other and theBoard[4].isdigit():            blockMoves.append(5)        if theBoard[5]==theBoard[4]==other and theBoard[3].isdigit():            blockMoves.append(4)        if theBoard[6]==theBoard[3]==other and theBoard[0].isdigit():            blockMoves.append(1)        if theBoard[6]==theBoard[0]==other and theBoard[3].isdigit():            blockMoves.append(4)        if theBoard[6]==theBoard[7]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[6]==theBoard[8]==other and theBoard[7].isdigit():            blockMoves.append(8)        if theBoard[6]==theBoard[4]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[6]==theBoard[2]==other and theBoard[4].isdigit():            blockMoves.append(5)        if theBoard[7]==theBoard[6]==other and theBoard[8].isdigit():            blockMoves.append(9)        if theBoard[7]==theBoard[8]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[7]==theBoard[4]==other and theBoard[1].isdigit():            blockMoves.append(2)        if theBoard[7]==theBoard[1]==other and theBoard[4].isdigit():            blockMoves.append(5)        if theBoard[8]==theBoard[7]==other and theBoard[6].isdigit():            blockMoves.append(7)        if theBoard[8]==theBoard[5]==other and theBoard[2].isdigit():            blockMoves.append(3)        if theBoard[8]==theBoard[6]==other and theBoard[7].isdigit():            blockMoves.append(8)        if theBoard[8]==theBoard[2]==other and theBoard[5].isdigit():            blockMoves.append(6)        if theBoard[8]==theBoard[4]==other and theBoard[0].isdigit():            blockMoves.append(1)        if theBoard[8]==theBoard[0]==other and theBoard[4].isdigit():            blockMoves.append(5)                    #first check for a possible winning move and return it        if winMoves:                theBoard[random.choice(winMoves)-1]=user        #otherwise, check for moves to block        elif blockMoves:                theBoard[random.choice(blockMoves)-1]=user        #if neither, choose a random move        else:                #loop until a valid move is found, then return it                while True:                        i=random.randrange(9)                        if theBoard[i].isdigit():                                theBoard[i]=user                                break        return theBoard#function: check for a winner or a cat's game on the board#input: the game board#output: returns the winner if there is one, False if it is a cat's game, or#None if it is neitherdef getWinner(theBoard):        #check row and column possibilities        for i in range(3):                #check row wins                if theBoard[i*3]==theBoard[i*3+1]==theBoard[i*3+2]:                        return theBoard[i*3]                #check column wins                elif theBoard[i]==theBoard[i+3]==theBoard[i+6]:                        return theBoard[i]        #check diagonal        if theBoard[0]==theBoard[4]==theBoard[8] or theBoard[2]==theBoard[4]==theBoard[6]:                return theBoard[4]        #check cat's game        for i in theBoard:                #check to see if there are any digits, or empty spaces, on the                #board                if i.isdigit():                        return None        return False#function: Main game loop to play player vs player tic tac toe game#input: None#output Nonedef pvp():        theBoard=[]        #fill board with numbers        for i in range(9):                theBoard.append(str(i+1))        player1=raw_input("Choose Player 1's letter.").upper()        #check for valid input        while not player1.isalpha() or len(player1)!=1:                player1=raw_input("Sorry, that is not a valid input.\nChoose Player 1's letter.").upper()        player2=raw_input("Choose Player 2's letter.").upper()        #check for valid input        while not player2.isalpha() or len(player2)!=1 or player2==player1:                player2=raw_input("Sorry, that is not a valid input.\nChoose Player 2's letter.").upper()        displayBoard(theBoard)        player=player1        #main game loop        while True:                print(player+"'s Turn!")                theBoard=getHumanMove(theBoard,player)                displayBoard(theBoard)                #check for a winner                if getWinner(theBoard):                        print(getWinner(theBoard)+" wins!")                        break                #check for a cat's game                elif getWinner(theBoard)==False:                        print("It's a cat's game!")                        break                #switch players                if player==player1:                        player=player2                else:                        player=player1#function: Main game loop to play player vs environment (computer) tic tac toe#game#input: None#output Nonedef pve():        theBoard=[]        #fill board with numbers        for i in range(9):                theBoard.append(str(i+1))        humanLetter=raw_input("Choose Player's letter.").upper()        #check for valid input        while not humanLetter.isalpha() or len(humanLetter)!=1:                humanLetter=raw_input("Sorry, that is not a valid input.\nChoose Player 1's letter.").upper()        compLetter=raw_input("Choose Computer's letter.").upper()        #check for valid input        while not compLetter.isalpha() or len(compLetter)!=1 or compLetter==humanLetter:                compLetter=raw_input("Sorry, that is not a valid input.\nChoose Player 2's letter.").upper()        displayBoard(theBoard)        player=humanLetter        #main game loop        while True:                print(player+"'s Turn!")                #check for player or computer move                if player==humanLetter:                        theBoard=getHumanMove(theBoard,humanLetter)                else:                        theBoard=getCompMove(theBoard, compLetter, humanLetter)                displayBoard(theBoard)                #check for a winner                if getWinner(theBoard):                        print(getWinner(theBoard)+" wins!")                        break                #check for a cat's game                elif getWinner(theBoard)==False:                        print("It's a cat's game!")                        break                #switch players                if player==humanLetter:                        player=compLetter                else:                        player=humanLetter#function: accepts input from user for playing against player or computer#input: None#output: returns 'p' for player or 'c' for computerdef gameChoice():        inp=int(raw_input("Play a one or two player game? (1/2)"))        #makes sure input is 1 or 2        while inp!=1 and inp!=2:                inp=int(raw_input("Play versus Player or Computer? (p/c)"))        #returns choice        return inp-1#function: accepts input from user for playing again or quitting#input: None#output: returns True if user wants to quitdef quitter():        again=raw_input("Play again? (y/n)").lower()        #makes sure input is 'y' or 'n'        while again!='y' and again!='n':                again=raw_input("Sorry, that is not a valid input.\nPlay again? (y/n)").lower()        #returns true if user wants to quit        if again=='n':                return True#Main program loopwhile __name__=='__main__':        if gameChoice():                pvp()        else:                pve()        #checks if user wants to quit        if quitter():                break        print("Let's play again!")                        